{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Dashboard.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","expand","to","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Footer","Dashboard","App","Container","Fragment","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAoCeA,EA3BA,WACX,OACI,gCACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,MACrB,kBAAC,gBAAD,CAAeC,GAAG,KACd,kBAACH,EAAA,EAAOI,MAAR,wBAEJ,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,WAE7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,UAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAAC,gBAAD,CAAeP,GAAG,KACd,kBAACM,EAAA,EAAIE,KAAL,2BAEJ,kBAAC,gBAAD,CAAeR,GAAG,mBACd,kBAACM,EAAA,EAAIE,KAAL,yBAEJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWE,KAAK,uBAA7B,uBCjBbC,EARA,WACX,OACI,gCACI,oDCGGC,EANG,WACd,OACI,2CCoBOC,MAff,WACE,OACA,kBAAC,gBAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAOC,KAAK,oBACZ,kBAAC,IAAD,CAAOA,KAAK,IAAIC,UAAWL,EAAWM,OAAK,KAE7C,kBAAC,EAAD,SCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8a9f9ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem\r\n} from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <Navbar bg=\"dark\" expand=\"md\">\r\n                <LinkContainer to=\"/\">\r\n                    <Navbar.Brand>Index Fun[ds]!</Navbar.Brand>\r\n                </LinkContainer>\r\n                <Navbar.Toggle aria-controls=\"navbar\" />\r\n\r\n                <Navbar.Collapse id=\"navbar\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <LinkContainer to=\"/\">\r\n                            <Nav.Link>About the Project</Nav.Link>\r\n                        </LinkContainer>\r\n                        <LinkContainer to=\"/ProgressCharts\">\r\n                            <Nav.Link>Progress Charts</Nav.Link>\r\n                        </LinkContainer>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"./TimeTrackers.html\">Time Trackers</a>\r\n                        </li>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Copyright &copy; 2019</p>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div>Dashboard</div>\r\n    );\r\n}\r\n\r\nexport default Dashboard","import React from 'react';\nimport { Container } from \"react-bootstrap\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport {\n  Header,\n  Footer,\n  Dashboard\n} from \"./components\";\n\nfunction App() {\n  return (\n  <BrowserRouter>\n    <Container>\n      <Header />\n      <React.Fragment>\n        <Route path=\"/ProgressCharts\" />\n        <Route path=\"/\" component={Dashboard} exact />\n      </React.Fragment>\n      <Footer />\n    </Container>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}